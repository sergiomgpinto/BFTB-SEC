//
// Protocol buffers definition for bftb server
//
syntax = "proto3";
package pt.tecnico.bftb.grpc;

/*----------------------------- Requests & Responses ------------------------------*/

/*-------------------- Protocol Messages ---------------------*/
message NonceRequest{
  bytes senderKey = 1;
}

message NonceResponse{
  bytes serverPublicKey = 1;// To verify digital signature in the library.
  int32 nonce = 2;
  ProofOfWorkRequest powRequest = 3;
  // Server sends nonce and challenge in order for the user to have a computationally moderate
  // work before using services in order to prevent against denial of service attacks.
}

// This is the string to which the client has a find a solution so that:
// hash(challenge + solution) -> starts with first 8 bits equal to zero
message ProofOfWorkRequest{
  string challenge = 1;
}

message ProofOfWorkResponse{
  string solution = 1;
}
/*-------------------- Read Operations ---------------------*/
message CheckAccountRequest{
  bytes key = 1;
  string userKey = 2; // Needed so that server knows what is the nonce the user.
  int32 rid = 3;
  ProofOfWorkResponse powResponse = 4;
}

message CheckAccountResponse{
  int32 balance = 1;
  repeated string pending= 2;
  int32 rid = 3;

}

message AuditRequest{
  bytes key = 1;
  string userKey = 2; // Needed so that server knows what is the nonce the user.
  int32 rid = 3;
  ProofOfWorkResponse powResponse = 4;
}

message AuditResponse{
  repeated string set = 1;
  int32 rid = 2;

}

message SearchKeysRequest{
  string userKey = 1; // Needed so that server knows what is the nonce the user.
  int32 rid = 2;
  ProofOfWorkResponse powResponse = 3;
}

message SearchKeysResponse{
  repeated string result = 1;
  int32 rid = 2;

}
/*-------------------- Write Operations ---------------------*/
message OpenAccountRequest{
  bytes key = 1;
  string username = 2;
  ProofOfWorkResponse powResponse = 3;
}

message OpenAccountResponse{
  string response = 1;
  string publicKey = 2;
  bytes serverPublicKey = 3;// to verify server digital signature in the library
  
}

message SendAmountRequest{
  string senderKey = 1;
  string receiverKey = 2;
  int32 amount = 3;
  int32 wts = 4;
  ProofOfWorkResponse powResponse = 5;
}

message SendAmountResponse{
  string response = 1;
  bytes serverPublicKey = 2;// to verify server digital signature in the library
  int32 wts = 3;

}

message ReceiveAmountRequest{
  string receiverKey = 1;// This key is the userKey since he can be the only one to accept the transaction.
  string senderKey = 2;
  int32 transactionId = 3;
  bool answer = 4;//true for accept and false for reject
  int32 wts = 5;
  ProofOfWorkResponse powResponse = 6;
}

message ReceiveAmountResponse{
  string result = 1;
  bytes serverPublicKey = 2;// to verify server digital signature in the library
  int32 wts = 3;

}

//---------------- Encrypted Structures --------------//

message EncryptedStruck{
  bytes digitalSignature = 1;// for write operations
  bytes digest = 2;// for read operations
  RawData rawData = 3;
}

message RawData{
  int32 nonce = 1;
  oneof request { // This guarantees at most one field can be set at the same time.
    OpenAccountRequest openAccountRequest = 2;
    OpenAccountResponse openAccountResponse = 3;
    SendAmountRequest sendAmountRequest = 4;
    SendAmountResponse sendAmountResponse = 5;
    CheckAccountRequest checkAccountRequest = 6;
    CheckAccountResponse checkAccountResponse = 7;
    AuditRequest auditRequest = 8;
    AuditResponse auditResponse = 9;
    ReceiveAmountRequest receiveAmountRequest = 10;
    ReceiveAmountResponse receiveAmountResponse = 11;
    SearchKeysRequest searchKeyRequest = 12;
    SearchKeysResponse searchKeyResponse = 13;
    NonceRequest nonceRequest = 14;
    NonceResponse nonceResponse = 15;
  }
}

/*------------------------------------ Services ------------------------------------*/

service BFTB{
  rpc getNonce (EncryptedStruck) returns (EncryptedStruck);
  rpc openAccount(EncryptedStruck) returns (EncryptedStruck);
  rpc sendAmount(EncryptedStruck) returns (EncryptedStruck);
  rpc checkAccount(EncryptedStruck) returns (EncryptedStruck);
  rpc audit(EncryptedStruck) returns (EncryptedStruck);
  rpc receiveAmount(EncryptedStruck) returns (EncryptedStruck);
  rpc searchKeys(EncryptedStruck) returns (EncryptedStruck);
}